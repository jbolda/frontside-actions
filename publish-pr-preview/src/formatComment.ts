import { PublishResults } from "./publish";
import fs from "fs";
import { markdownTable } from "markdown-table";
import { isPublishedPackage, isUnsuccessfulPublishPackage, PublishedPackage, UnsuccessfulPublishPackage } from "./types";

export function formatComment({ results }: { results: PublishResults }): string {
  let { tag, attemptedPackages } = results;
  let footer = "\n<p align='right'><em>Generated by <a href='https://github.com/thefrontside/actions/tree/main/publish-pr-preview'>@thefrontside/actions <img alt='Frontside' height='16' src='https://frontside.com/favicon-32x32.png?v=de93ee3512df754fd0cc381d84527025'/></a><em></p>";

  let publishedPackages = attemptedPackages
  .flatMap(pkg => isPublishedPackage(pkg) ? [pkg] : []);

  let unsuccessfulPublishes = attemptedPackages
  .flatMap(pkg => isUnsuccessfulPublishPackage(pkg) ? [pkg] : []);

  let successfulPublishes = "The following preview packages were published:\n" + tableOfPublishedPackages({ packages: publishedPackages, tag });
  let failedPublishes = "ðŸš¨ We were unable to publish these packages:\n" + tableOfFailedPublishes({ packages: unsuccessfulPublishes });

  if (publishedPackages.length >= 1 && unsuccessfulPublishes.length >= 1
  ) {
    return successfulPublishes+failedPublishes+footer;
  } else if (publishedPackages.length >= 1) {
    return successfulPublishes+footer;
  } else if (unsuccessfulPublishes.length >= 1) {
    return failedPublishes+footer;
  } else {
    return "ðŸ“£ NOTIFICATION\nYou are receiving this message because we did not publish any packages."+footer;
  }
}

function preCodeWrap (child: string) {
  return `<br><pre><code>${child}</code></pre>`;
}

function tableOfPublishedPackages ({
  packages,
  tag,
}:{
  packages: PublishedPackage[],
  tag: string,
}) {
  let installCommand = fs.existsSync("yarn.lock") ? "yarn add" : "npm install";
  return markdownTable([
    ["Name", "Version", "Install Command"],
    ...packages.map(pkg => {
      return [
        preCodeWrap(pkg.name),
        preCodeWrap(pkg.publishedVersion),
        preCodeWrap(`${installCommand} ${pkg.name}@${tag}`),
      ];
    }),
  ], { align: [ "c", "c", "" ] });
}

function tableOfFailedPublishes({
  packages,
}:{
  packages: UnsuccessfulPublishPackage[],
}) {
  return markdownTable([
    ["Name", "Attempted Versions"],
    ...packages.map(pkg => {
      return [
        preCodeWrap(pkg.name),
        preCodeWrap(pkg.attemptedVersions.join(", ")),
      ];
    }),
  ], { align: [ "c", "" ] });
}
